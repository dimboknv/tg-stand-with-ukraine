// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessageUserReaction represents TL type `messageUserReaction#932844fa`.
//
// See https://core.telegram.org/constructor/messageUserReaction for reference.
type MessageUserReaction struct {
	// UserID field of MessageUserReaction.
	UserID int64
	// Reaction field of MessageUserReaction.
	Reaction string
}

// MessageUserReactionTypeID is TL type id of MessageUserReaction.
const MessageUserReactionTypeID = 0x932844fa

// Ensuring interfaces in compile-time for MessageUserReaction.
var (
	_ bin.Encoder     = &MessageUserReaction{}
	_ bin.Decoder     = &MessageUserReaction{}
	_ bin.BareEncoder = &MessageUserReaction{}
	_ bin.BareDecoder = &MessageUserReaction{}
)

func (m *MessageUserReaction) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.UserID == 0) {
		return false
	}
	if !(m.Reaction == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageUserReaction) String() string {
	if m == nil {
		return "MessageUserReaction(nil)"
	}
	type Alias MessageUserReaction
	return fmt.Sprintf("MessageUserReaction%+v", Alias(*m))
}

// FillFrom fills MessageUserReaction from given interface.
func (m *MessageUserReaction) FillFrom(from interface {
	GetUserID() (value int64)
	GetReaction() (value string)
}) {
	m.UserID = from.GetUserID()
	m.Reaction = from.GetReaction()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageUserReaction) TypeID() uint32 {
	return MessageUserReactionTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageUserReaction) TypeName() string {
	return "messageUserReaction"
}

// TypeInfo returns info about TL type.
func (m *MessageUserReaction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageUserReaction",
		ID:   MessageUserReactionTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Reaction",
			SchemaName: "reaction",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageUserReaction) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageUserReaction#932844fa as nil")
	}
	b.PutID(MessageUserReactionTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageUserReaction) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageUserReaction#932844fa as nil")
	}
	b.PutLong(m.UserID)
	b.PutString(m.Reaction)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageUserReaction) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageUserReaction#932844fa to nil")
	}
	if err := b.ConsumeID(MessageUserReactionTypeID); err != nil {
		return fmt.Errorf("unable to decode messageUserReaction#932844fa: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageUserReaction) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageUserReaction#932844fa to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messageUserReaction#932844fa: field user_id: %w", err)
		}
		m.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageUserReaction#932844fa: field reaction: %w", err)
		}
		m.Reaction = value
	}
	return nil
}

// GetUserID returns value of UserID field.
func (m *MessageUserReaction) GetUserID() (value int64) {
	if m == nil {
		return
	}
	return m.UserID
}

// GetReaction returns value of Reaction field.
func (m *MessageUserReaction) GetReaction() (value string) {
	if m == nil {
		return
	}
	return m.Reaction
}
